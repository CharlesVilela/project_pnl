# -*- coding: utf-8 -*-
"""random_forest_intent_model.pkl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gWWNVT46hMgV4opKjI_N8w27Lp7lCBMp
"""

import pandas as pd

# Upload manual
from google.colab import files
uploaded = files.upload()

# Forçar separação por linha e ajustar colunas
df = pd.read_csv("dataset_test.csv", encoding="cp1252", sep=";")
df.columns = df.columns.str.strip().str.lower()  # remove espaços e força minúsculas
df = df[["text", "intent"]]  # garante apenas as colunas certas

# Verificar
df.head()

from sklearn.model_selection import train_test_split

X = df["text"]
y = df["intent"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

pipeline = Pipeline([
    ("tfidf", TfidfVectorizer()),
    ("clf", RandomForestClassifier(n_estimators=100, random_state=42))
])

pipeline.fit(X_train, y_train)

from sklearn.metrics import classification_report, accuracy_score

y_pred = pipeline.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

import joblib
import os

# Garante que a pasta existe
os.makedirs("model_train/model_train_intent/version1", exist_ok=True)

# Salva o PIPELINE treinado corretamente
joblib.dump(pipeline, "model_train/model_train_intent/version1/random_forest_intent_model.pkl")